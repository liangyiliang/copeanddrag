<!DOCTYPE html>

<html lang="en">

<head>
    <meta charset="utf-8" />
    <title>D3 Alloy Instance Layout</title>
    <style>
        .node {
            /* stroke: black; */
            fill: white;
            stroke-width: 1.5px;
            cursor: move;
        }

        .group {
            stroke: #fff;
            stroke-width: 1.5px;
            cursor: move;
            opacity: 0.7;
        }

        .link {
            stroke: darkslategrey;
            fill: none;
            stroke-width: 1px;
            stroke-opacity: 1;
            marker-end: url(#end-arrow);
        }

        .linkarrow {
            stroke: darkslategrey;
            fill: darkslategrey;
            stroke-width: 0px;
            stroke-opacity: 0.7;
            marker-end: url(#end-arrow);
        }

        .linkoutline {
            stroke: white;
            stroke-width: 4px;
            fill: none;
        }

        .label {
            fill: black;
            font-family: system-ui;
            font-size: 10px;
            text-anchor: middle;
            cursor: move;
        }

        .link-label {

            fill: black;
            font-family: Verdana;
            font-size: 10px;
            text-anchor: middle;
            cursor: move;
        }

        .groupLabel {
            fill: black;
            font-family: Verdana;
            font-size: 12px;
            text-anchor: middle;
            cursor: move;
        }
    </style>


    <!-- Include d3 here -->
    <script src="https://d3js.org/d3.v4.min.js"></script>


</head>

<body>
    <div class="container">
        <h1>Cassowary + D3 Instance</h1>

        <div class="container-fluid" id="svg-container">
            <svg id="svg" width="<%- width %>" height="<%- height %>">
                <defs>
                    <marker id="end-arrow" markerWidth="10" markerHeight="7" refX="10" refY="3.5" orient="auto">
                        <polygon points="0 0, 10 3.5, 0 7" />
                    </marker>
                </defs>
            </svg>
            <script>
                window.addEventListener('load', function () {

                    var color = d3.scaleOrdinal(d3.schemeCategory20);
                    var width = <%- width %>, height = <%- height %>;

                    var svg = d3.select("#svg");

                    var nodes = <%- JSON.stringify(nodes) %>;

                    var edges = <%- JSON.stringify(edges) %>;




                    nodes.forEach(function (node) {
                        node.name = node.id;
                        // Set initial fixed positions
                        node.fx = node.x;
                        node.fy = node.y;
                    });


                    // Need to understand this
                    var simulation = d3.forceSimulation(nodes)
                        .force("link", d3.forceLink(edges).id(function (d) { return d.id; }).distance(100))
                        .force("charge", d3.forceManyBody().strength(-300))
                        .force("center", d3.forceCenter(width / 2, height / 2))
                        .on("tick", ticked);


                    var node = svg.append("g")
                        .attr("class", "nodes")
                        .selectAll("g")
                        .data(nodes)
                        .enter().append("g");
                        // .call(d3.drag()
                        //     .on("start", dragstarted)
                        //     .on("drag", dragged)
                        //     .on("end", dragended));

                    node.append("rect")
                        .attr("width", function (d) { return d.width; }) 
                        .attr("height", function (d) { return d.height; }) 
                        .attr("x", function (d) { return -d.width / 2; }) 
                        .attr("y", function (d) { return -d.height / 2; }) 
                        .attr("stroke", function (d) { return d.color; }) 
                        .attr("stroke-width", 1.5)
                        .attr("fill", "transparent"); 



                    node.append("text")
                        .attr("class", "label")
                        .each(function (d) {
                            // Append tspan for d.name
                            d3.select(this).append("tspan")
                                .attr("x", 0) // Align with the parent text element
                                .attr("dy", "0em") // Start at the same vertical position
                                .style("font-weight", "bold")
                                .text(d.name);

                            var y = 1; // Start from the next line for attributes

                            // Append tspans for each attribute
                            for (let key in d.attributes) {
                                d3.select(this).append("tspan")
                                    .attr("x", 0) // Align with the parent text element
                                    .attr("dy", `${y}em`) // Move each attribute to a new line
                                    .text(key + ": " + d.attributes[key]);
                                y += 1; // Increment for the next line
                            }
                        });


                    var link = svg.append("g")
                        .attr("class", "links")
                        .selectAll("g")
                        .data(edges)
                        .enter().append("g")
                        .attr("class", "link-group");

                    link.append("path")
                        .attr("class", "link");

                    link.append("text")
                        .attr("class", "link-label")
                        .text(function (d) { return d.label; });

                    simulation
                        .nodes(nodes)
                        .on("tick", ticked);

                    console.log(nodes);
                    console.log(edges);


                    // function dragstarted(d) {
                    //     if (!d3.event.active) simulation.alphaTarget(0.3).restart();
                    //     d.fx = d.x;
                    //     d.fy = d.y;
                    // }

                    // function dragged(d) {
                    //     d.fx = d3.event.x;
                    //     d.fy = d3.event.y;
                    // }

                    // function dragended(d) {
                    //     if (!d3.event.active) simulation.alphaTarget(0);
                    //     d.fx = null;
                    //     d.fy = null;
                    // }

                    function ticked() {
                        link.select("path").attr("d", function (d) {
                            // Calculate the intersection points
                            var sourceX = d.source.x;
                            var sourceY = d.source.y;
                            var targetX = d.target.x;
                            var targetY = d.target.y;

                            var dx = targetX - sourceX;
                            var dy = targetY - sourceY;
                            var distance = Math.sqrt(dx * dx + dy * dy);

                            var sourceWidth = d.source.width / 2;
                            var sourceHeight = d.source.height / 2;
                            var targetWidth = d.target.width / 2;
                            var targetHeight = d.target.height / 2;

                            var sourceOffsetX = (dx / distance) * sourceWidth;
                            var sourceOffsetY = (dy / distance) * sourceHeight;
                            var targetOffsetX = (dx / distance) * targetWidth;
                            var targetOffsetY = (dy / distance) * targetHeight;

                            var sourceIntersectionX = sourceX + sourceOffsetX;
                            var sourceIntersectionY = sourceY + sourceOffsetY;
                            var targetIntersectionX = targetX - targetOffsetX;
                            var targetIntersectionY = targetY - targetOffsetY;

                            return "M" + sourceIntersectionX + "," + sourceIntersectionY +
                                "L" + targetIntersectionX + "," + targetIntersectionY;
                        });

                        link.select("text")
                            .attr("x", function (d) {
                                return (d.source.x + d.target.x) / 2;
                            })
                            .attr("y", function (d) {
                                return (d.source.y + d.target.y) / 2;
                            });

                            node.attr("transform", function(d) {

                                return "translate(" + d.x + "," + d.y + ")";
                            });
                    }

                });
            </script>

        </div>

        <div>

            <h3>Nodes</h3>

            <pre>
                <%- JSON.stringify(nodes, null, 2) %>
            </pre>


            <h3>Edges</h3>

            <pre>
                <%- JSON.stringify(edges, null, 2) %>
            </pre>
        </div>

    </div>


</body>

</html>