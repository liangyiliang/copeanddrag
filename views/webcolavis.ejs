<!DOCTYPE html>

<html lang="en">

<head>
    <meta charset="utf-8" />
    <title>Webcola Alloy Instance Layout</title>
    <style>
        .node {
            /* stroke: black; */
            fill: white;
            stroke-width: 1.5px;
            cursor: move;
        }

        .group {
            stroke: #fff;
            stroke-width: 1.5px;
            cursor: move;
            opacity: 0.7;
        }

        .link {
            stroke: darkslategrey;
            fill: none;
            stroke-width: 1px;
            stroke-opacity: 1;
            marker-end: url(#end-arrow);
        }

        .linkarrow {
            stroke: darkslategrey;
            fill: darkslategrey;
            stroke-width: 0px;
            stroke-opacity: 0.7;
            marker-end: url(#end-arrow);
        }

        .linkoutline {
            stroke: white;
            stroke-width: 4px;
            fill: none;
        }

        .label {
            fill: black;
            font-family: system-ui;
            font-size: 10px;
            text-anchor: middle;
            cursor: move;
        }

        .link-label {

            fill: black;
            font-family: Verdana;
            font-size: 10px;
            text-anchor: middle;
            cursor: move;
        }

        .groupLabel {
            fill: black;
            font-family: Verdana;
            font-size: 12px;
            text-anchor: middle;
            cursor: move;
        }
    </style>

    <script src="https://marvl.infotech.monash.edu/webcola/extern/graphlib-dot.min.js"></script>
    <!-- Minified version -->
    <!-- <script src="http://marvl.infotech.monash.edu/webcola/cola.min.js"></script> -->
    <!-- Full version -->
    <script src="https://marvl.infotech.monash.edu/webcola/cola.min.js"></script>

    <!-- Include d3 here -->
    <script src="https://d3js.org/d3.v4.min.js"></script>
</head>

<body>
    <div class="container">
        <h1>WebCola Instance</h1>
        <div class="btn-group" role="group">
            <button type="button" class="btn btn-outline-secondary"><a href="#svg"> WebCola Diagram </a></button>
            <button type="button" class="btn btn-outline-secondary"><a href="#constraints"> WebCola Alignment
                    Constraints </a></button>
            <button type="button" class="btn btn-outline-secondary"><a href="#groups"> WebCola Group Definitions
                </a></button>
            <button type="button" class="btn btn-outline-secondary"><a href="#graphDefs"> WebCola Graph Definitions
                </a></button>
        </div>
        <hr>
        <div class="container-fluid" id="svg-container">
        <svg id="svg" width="<%- width %>" height="<%- height %>">
            <defs>
                <marker id="end-arrow" markerWidth="10" markerHeight="7" refX="10" refY="3.5" orient="auto">
                    <polygon points="0 0, 10 3.5, 0 7" />
                </marker>
            </defs>
        </svg>
        <script>
            window.addEventListener('load', function () {


                const dy_for_linespacing = 5; // Adjust for spacing between lines

                var color = d3.scaleOrdinal(d3.schemeCategory20);               
                var width = <%- width %>, height = <%- height %>;

                var svg = d3.select("#svg");
                var colaLayout = cola.d3adaptor(d3)
                    .convergenceThreshold(0.1) // TODO: What should we do here?
                    .avoidOverlaps(true)
                    .size([width, height]);

                var nodes = <%- JSON.stringify(colaNodes) %>;
                var edges = <%- JSON.stringify(colaEdges) %>;

                const LINK_DISTANCE = Math.min(width, height) / Math.sqrt(nodes.length);
                console.log("Link distance: ", LINK_DISTANCE);

                nodes.forEach(function (node) {
                    node.name = node.id;
                });

                var constraints = <%- JSON.stringify(colaConstraints) %>;
                var groups = <%- JSON.stringify(colaGroups) %>;

                colaLayout
                    .nodes(nodes)
                    .links(edges)
                    .constraints(constraints)
                    .groups(groups)
                    .jaccardLinkLengths(LINK_DISTANCE, 3);


                const margin = 10;

                var lineFunction = d3.line()
                                .x(function (d) { return d.x; })
                                .y(function (d) { return d.y; });


                var routeEdges = function () {
                    colaLayout.prepareEdgeRouting(margin / 3);
                    link.attr("d", function (d) { return lineFunction(colaLayout.routeEdge(d)); });
                }




                var link = svg.selectAll(".link")
                    .data(edges)
                    .enter().append("path")
                    .attr("class", "link");



                var node = svg.selectAll(".node")
                    .data(nodes)
                    .enter().append("rect") // Changed from circle to rect
                    .attr("class", "node")
                    .attr("width", function (d) { return d.width; }) // Use node's width
                    .attr("height", function (d) { return d.height; }) // Use node's height
                    .attr("x", function (d) { return -d.width / 2; }) // Center the rectangle on the node's x
                    .attr("y", function (d) { return -d.height / 2; }) // Center the rectangle on the node's y
                    .attr("stroke", function (d) { return d.color; }) // Outline color of the node
                    .attr("stroke-width", 1.5) // Adjust the stroke width as needed
                    .call(colaLayout.drag);

                    var label = svg.selectAll(".label")
                                .data(nodes)
                                .enter().append("text")
                                .attr("class", "label")
                                .each(function(d) {


                                    if (d.name.startsWith("_")) {
                                        return;
                                    }

                                    // Append tspan for d.name
                                    d3.select(this).append("tspan")
                                        .attr("x", 0) // Align with the parent text element
                                        .attr("dy", "0em") // Start at the same vertical position
                                        .style("font-weight", "bold")
                                        .text(d.name);

                                    var y = 1; // Start from the next line for attributes

                                    // Append tspans for each attribute
                                    for (let key in d.attributes) {
                                        d3.select(this).append("tspan")
                                            .attr("x", 0) // Align with the parent text element
                                            .attr("dy", `${y}em`) // Move each attribute to a new line
                                            .text(key + ": " + d.attributes[key]);
                                        y += 1; // Increment for the next line
                                    }
                                })
                                .call(colaLayout.drag);

                var attributes = svg.selectAll(".attributes")
                    .data(nodes)
                    .enter().append("text")
                    .attr("class", "attributes")
                    .each(function (d) {
                        var y = 0; // Initial y offset

                        for (let key in d.attributes) {
                            d3.select(this).append("tspan")
                                .attr("x", d.x) // Set the absolute x position of the first tspan to align with the parent text element
                                .attr("dy", `${y}px`) // Use dy only for vertical spacing from the previous tspan or the parent text element's y position
                                .text(key + ": " + d.attributes[key]);
                            y += dy_for_linespacing; // Increment y offset for the next line
                        }
                    })
                    .call(colaLayout.drag);





                var linklabel = svg.selectAll(".link-label")
                    .data(edges)
                    .enter().append("text")
                    .attr("class", "link-label")
                    .text(d => d.relName); // Set the text content to the link's label

                node.append("title")
                    .text(function (d) { return d.name; });


                // Add a rectangle for each group and a label at the top of the group

                var group = svg.selectAll(".group")
                    .data(groups)
                    .enter().append("rect")
                    .attr("class", "group")
                    .attr("rx", 8).attr("ry", 8)
                    .style("fill", function (d, i) { return color(i); })
                    .call(colaLayout.drag);

                var groupLabel = svg.selectAll(".groupLabel")
                    .data(groups)
                    .enter().append("text")
                    .attr("class", "groupLabel")
                    .text(function (d) { return d.name; })
                    .call(colaLayout.drag);


                colaLayout.on("tick", function () {

                    

                    node
                        .each(function (d) { d.innerBounds = d.bounds.inflate(-1); })
                        .attr("x", function (d) { return d.bounds.x; })
                        .attr("y", function (d) { return d.bounds.y; })
                        .attr("width", function (d) { return d.bounds.width(); })
                        .attr("height", function (d) { return d.bounds.height(); });

                    label
                    .attr("x", d => d.x)
                    .attr("y", d => d.y)
                    .each(function(d) {
                        var y = 0; // Initialize y offset for tspans
                        d3.select(this).selectAll("tspan")
                            .attr("x", d.x) // Align tspans with the node's x position
                            .attr("dy", function() {
                                y += 1; // Increment y for each tspan to create line spacing
                                return y === 1 ? "0em" : "1em"; // Keep the first tspan in place, move others down
                            });
                    })
                    .raise();

    // Function to generate a random offset along the path
    function getRandomOffsetAlongPath() {
        return (Math.random() - 0.5) * 20; // Random value between -10 and 10
    }

    // Helper function to calculate new position along the path
    function calculateNewPosition(d, axis) {
        const midpoint = (d.source[axis] + d.target[axis]) / 2;
        const direction = d.target[axis] - d.source[axis];
        const length = Math.sqrt(Math.pow(d.target.x - d.source.x, 2) + Math.pow(d.target.y - d.source.y, 2));
        const unitDirection = direction / length;
        const offset = getRandomOffsetAlongPath();
        return midpoint + unitDirection * offset;
    }

    linklabel.attr("x", d => calculateNewPosition(d, 'x'))
        .attr("y", d => calculateNewPosition(d, 'y'))
        .attr("text-anchor", "middle") // Center the text on its position
        .attr("dy", "-5") // Adjust the y-position to offset the text above the link
        .raise();



                    group.attr("x", function (d) { return d.bounds.x; })
                        .attr("y", function (d) { return d.bounds.y; })
                        .attr("width", function (d) { return d.bounds.width(); })
                        .attr("height", function (d) { return d.bounds.height(); })
                        .lower();

                    groupLabel.attr("x", function (d) { return d.bounds.x; })
                        .attr("y", function (d) { return d.bounds.y; })
                        .attr("text-anchor", "middle") // Center the text on its position
                        .attr("dy", "-5") // Adjust the y-position to offset the text above the link
                        .raise();



                        link
                        .attr("d", function (d) {
                            var route = cola.makeEdgeBetween(d.source.innerBounds, d.target.innerBounds, 5);
                            return lineFunction([route.sourceIntersection, route.arrowStart]);
                        });
                        //.raise();    

                });


                colaLayout.start()
                    .on("end", routeEdges);

            });
        </script>

        </div>

        <div id="webcola">

            <h3> Alignment Constraints </h3>
            <pre id="constraints"> <%- JSON.stringify(colaConstraints, null,2) %>;%></pre>

            <h3> Group Definitions</h3>
            <pre id="groups"> <%- JSON.stringify(colaGroups, null,2) %>;%></pre>

            <h3 id="graphDefs"> Graph definitions </h3>
            <h4>Nodes</h4>
            <pre id="nodes"> <%- JSON.stringify(colaNodes,null, 2) %>;%></pre>
            <h4>Edges</h4>
            <pre id="edges"> <%- JSON.stringify(colaEdges, null,2) %>;%></pre>

        </div>

    </div>


</body>

</html>