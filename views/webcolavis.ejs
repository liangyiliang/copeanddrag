<!DOCTYPE html>

<html lang="en">

<head>
    <meta charset="utf-8" />
    <title>Webcola Alloy Instance Layout</title>
    <style>
        .node {
            stroke: black;
            fill:white;
            stroke-width: 1.5px;
            cursor: move;
        }

        .group {
            stroke: #fff;
            stroke-width: 1.5px;
            cursor: move;
            opacity: 0.7;
        }

        .link {
            stroke: darkslategrey;
            fill: none;
            stroke-width: 2px;
            stroke-opacity: 1;
            marker-end: url(#end-arrow);
        }

        .linkarrow {
            stroke: darkslategrey;
            fill: darkslategrey;
            stroke-width: 0px;
            stroke-opacity: 1;
            marker-end: url(#end-arrow);
        }

        .linkoutline {
            stroke: white;
            stroke-width: 4px;
            fill: none;
        }

        .label {
            fill: black;
            font-family: Verdana;
            font-size: 12px;
            text-anchor: middle;
            cursor: move;
        }

        .link-label {
            background-color: white;
            fill: black;
            font-family: Verdana;
            font-size: 12px;
            text-anchor: middle;
            cursor: move;
        }

        .groupLabel {
            fill: black;
            font-family: Verdana;
            font-size: 12px;
            text-anchor: middle;
            cursor: move;
        }
    </style>


    <!-- Minified version -->
    <!-- <script src="http://marvl.infotech.monash.edu/webcola/cola.min.js"></script> -->
    <!-- Full version -->
    <script src="http://marvl.infotech.monash.edu/webcola/cola.js"></script>

    <!-- Include d3 here -->
    <script src="https://d3js.org/d3.v4.min.js"></script>
</head>

<body>
    <div class="container">
    <h1>WebCola Instance</h1>
    <div class="btn-group" role="group">
        <button type="button" class="btn btn-outline-secondary"><a href="#svg"> WebCola Diagram </a></button>
        <button type="button" class="btn btn-outline-secondary"><a href="#constraints"> WebCola Alignment Constraints </a></button>
        <button type="button" class="btn btn-outline-secondary"><a href="#groups"> WebCola Group Definitions </a></button>
        <button type="button" class="btn btn-outline-secondary"><a href="#graphDefs"> WebCola Graph Definitions </a></button>
      </div>
    <hr>
    <svg id="svg" width="<%- width %>" height="<%- height %>">
        <defs>
            <marker id="end-arrow" markerWidth="10" markerHeight="7" refX="10" refY="3.5" orient="auto">
                <polygon points="0 0, 10 3.5, 0 7" />
            </marker>
        </defs>
    </svg>
    <script>
        window.addEventListener('load', function () {


            var color = d3.scaleOrdinal(d3.schemeCategory20);

            var width = <%- width %>, height = <%- height %>;

            var svg = d3.select("#svg");
            var colaLayout = cola.d3adaptor(d3)
                .linkDistance(120)
                .avoidOverlaps(true)
                .size([width, height]);

            var nodes = <%- JSON.stringify(colaNodes) %>;
            var edges = <%- JSON.stringify(colaEdges) %>;

            console.log(nodes);

            nodes.forEach(function (node) {
                node.name = node.id;
            });

            var constraints = <%- JSON.stringify(colaConstraints) %>;
            var groups = <%- JSON.stringify(colaGroups) %>;

            colaLayout
                .nodes(nodes)
                .links(edges)
                .constraints(constraints)
                .groups(groups)
                .start();

            var link = svg.selectAll(".link")
                .data(edges)
                .enter().append("line")
                .attr("class", "link")
                .attr("x1", d => d.source.x)
                .attr("y1", d => d.source.y)
                .attr("x2", d => d.target.x)
                .attr("y2", d => d.target.y)
                .attr("stroke", "black") // Set the color of the edge
                .attr("marker-end", "url(#end-arrow)"); // Apply the arrow marker

            // var node = svg.selectAll(".node")
            //     .data(nodes)
            //     .enter().append("circle")
            //     .attr("class", "node")
            //     .attr("r", 5)
            //     .call(colaLayout.drag);


                var node = svg.selectAll(".node")
                    .data(nodes)
                    .enter().append("rect") // Changed from circle to rect
                    .attr("class", "node")
                    .attr("width", function(d) { return d.width; }) // Use node's width
                    .attr("height", function(d) { return d.height; }) // Use node's height
                    .attr("x", function(d) { return -d.width / 2; }) // Center the rectangle on the node's x
                    .attr("y", function(d) { return -d.height / 2; }) // Center the rectangle on the node's y
                    .call(colaLayout.drag);

            var label = svg.selectAll(".label")
                .data(nodes)
                .enter().append("text")
                .attr("class", "label")
                .text(function (d) {
                    return d.name;
                })
                .call(colaLayout.drag);

            // Assuming 'svg' is your d3-selected SVG element
            var linklabel = svg.selectAll(".link-label")
                .data(edges)
                .enter().append("text")
                .attr("class", "link-label")
                .text(d => d.relName); // Set the text content to the link's label

            node.append("title")
                .text(function (d) { return d.name; });


            // Add a rectangle for each group and a label at the top of the group

            var group = svg.selectAll(".group")
                .data(groups)
                .enter().append("rect")
                .attr("class", "group")
                .attr("rx", 8).attr("ry", 8)
                .style("fill", function (d, i) { return color(i); })
                .call(colaLayout.drag);

            var groupLabel = svg.selectAll(".groupLabel")
                .data(groups)
                .enter().append("text")
                .attr("class", "groupLabel")
                .text(function (d) { return d.name; })
                .call(colaLayout.drag);
            

            colaLayout.on("tick", function () {

                link.attr("x1", function (d) {
                    // Adjust start point to source's bounding box edge
                    var deltaX = d.target.x - d.source.x;
                    if (Math.abs(deltaX) > Math.abs(d.target.y - d.source.y)) {
                        return deltaX > 0 ? d.source.x + d.source.width / 2 : d.source.x - d.source.width / 2;
                    } else {
                        return d.source.x;
                    }
                })
                .attr("y1", function (d) {
                    // Adjust start point to source's bounding box edge
                    var deltaY = d.target.y - d.source.y;
                    if (Math.abs(deltaY) > Math.abs(d.target.x - d.source.x)) {
                        return deltaY > 0 ? d.source.y + d.source.height / 2 : d.source.y - d.source.height / 2;
                    } else {
                        return d.source.y;
                    }
                })
                .attr("x2", function (d) {
                    // Adjust end point to target's bounding box edge
                    var deltaX = d.target.x - d.source.x;
                    if (Math.abs(deltaX) > Math.abs(d.target.y - d.source.y)) {
                        return deltaX > 0 ? d.target.x - d.target.width / 2 : d.target.x + d.target.width / 2;
                    } else {
                        return d.target.x;
                    }
                })
                .attr("y2", function (d) {
                    // Adjust end point to target's bounding box edge
                    var deltaY = d.target.y - d.source.y;
                    if (Math.abs(deltaY) > Math.abs(d.target.x - d.source.x)) {
                        return deltaY > 0 ? d.target.y - d.target.height / 2 : d.target.y + d.target.height / 2;
                    } else {
                        return d.target.y;
                    }
                })
                .raise();

                node.attr("x", function (d) { return d.bounds.x; })
                    .attr("y", function (d) { return d.bounds.y; })
                    .attr("width", function (d) { return d.bounds.width(); })
                    .attr("height", function (d) { return d.bounds.height(); });

                label.attr("x", function (d) { return d.x; })
                    .attr("y", function (d) { return d.y; })
                    .raise();

                linklabel.attr("x", d => (d.source.x + d.target.x) / 2)
                    .attr("y", d => (d.source.y + d.target.y) / 2)
                    .attr("text-anchor", "middle") // Center the text on its position
                    .attr("dy", "-5") // Adjust the y-position to offset the text above the link
                    .raise();
                
                group.attr("x", function (d) { return d.bounds.x; })
                    .attr("y", function (d) { return d.bounds.y; })
                    .attr("width", function (d) { return d.bounds.width(); })
                    .attr("height", function (d) { return d.bounds.height(); })
                    .lower();

                groupLabel.attr("x", function (d) { return d.bounds.x; })
                    .attr("y", function (d) { return d.bounds.y; })
                    .attr("text-anchor", "middle") // Center the text on its position
                    .attr("dy", "-5") // Adjust the y-position to offset the text above the link
                    .raise();
            });
        });
    </script>



    <div id="webcola">

    <h3> Alignment Constraints </h3>
    <pre id="constraints"> <%- JSON.stringify(colaConstraints, null,2) %>;%></pre>

    <h3> Group Definitions</h3>
    <pre id="groups"> <%- JSON.stringify(colaGroups, null,2) %>;%></pre>

    <h3 id="graphDefs"> Graph definitions </h3>
    <h4>Nodes</h4>
    <pre id="nodes"> <%- JSON.stringify(colaNodes,null, 2) %>;%></pre>
    <h4>Edges</h4>
    <pre id="edges"> <%- JSON.stringify(colaEdges, null,2) %>;%></pre>

    </div>

    </div>


</body>

</html>