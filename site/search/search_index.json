{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Cope-and-Drag : Diagramming by refinement","text":"<p>CnD is a lightweight diagramming language designed for use with Alloy-like languages. Diagrams are built by refining default Alloy output, rather than requiring users to build  visualizations from scratch.  This approach lets you get started quickly! Every well formed CnD spec (even an empty spec) produces a diagram. This is achieved via two kinds of operations:</p> <ul> <li>Constraints</li> <li>Directives</li> </ul> <p>Further documentation:</p> <ul> <li>Syntax</li> <li>Examples</li> </ul>"},{"location":"constraints/","title":"Constraints","text":"<p>Cope and Drag constraints define rules about the relative positions of diagram elements.</p>"},{"location":"constraints/#cyclic-constraints","title":"Cyclic Constraints","text":"<p>Cyclic constraints enforce that elements related by a given field should be arranged in a circular layout.</p> <p>Example:</p> <pre><code>- cyclic:\n    field: next\n    direction: clockwise\n</code></pre> <p>This ensures that elements linked by <code>next</code> form a cycle in a consistent direction.</p>"},{"location":"constraints/#orientation-constraints","title":"Orientation Constraints","text":"<p>Orientation constraints specify the relative positioning of elements.</p> <p>Example:</p> <pre><code>- orientation:\n    field: c1\n    directions: [left, below]\n- orientation:\n    field: c2\n    directions: [right, below]\n</code></pre> <p>This ensures that elements connected via <code>c1</code> are placed to the left and below their parent, while <code>c2</code> elements are positioned to the right and below.</p>"},{"location":"constraints/#grouping-constraints","title":"Grouping Constraints","text":"<p>Grouping constraints enforce that related elements are visually grouped together.</p> <p>Example:</p> <pre><code>- group:\n    field: category\n    target: domain\n</code></pre> <p>This ensures that all elements related by <code>category</code> are placed within a shared boundary. Groups cannot share boundaries.</p>"},{"location":"constraints/#when-constraints-cannot-be-satisfied","title":"When Constraints Cannot Be Satisfied","text":"<p>All CnD constraints are hard constraints, and thus must be satisfied for a diagram to be produced. Constraints might not be satisfied for one of two reasons:</p> <ol> <li>A single CnD constraint definition could be inherently unsatisfiable. For example, a constraint on the <code>next</code> field that requires the same field to be laid out both leftwards and rightwards:</li> </ol> <p><code>yaml    - orientation:        field: next        directions: [right, left]</code></p> <p>This represents a bug in the CnD spec, and can be identified statically. In this case, CnD produces an error message in terms of the constraints that could not be satisfied:</p> <p><code>Error: Inconsistent orientation constraint:    Field `next` cannot be laid out with directions: right, left.</code> 2. Some constraints may be individually satisfiable, but become contradictory when laying out a specific instance. This is akin to a dynamic error, as it depends on the structure of the instance being visualized. For example, consider the constraints:</p> <p><code>yaml    - orientation:        sigs: [X, Y]        directions: [below]    - orientation:        sigs: [Y, Z]        directions: [below]    - orientation:        sigs: [Z, X]        directions: [below]</code>    If an instance\u2019s elements form a cyclic dependency, the constraints become unsatisfiable. However, an instance may lack atoms of, say, <code>Z</code>, in which case the constraints are satisfiable.</p> <p>In both these cases, CnD does not produce a diagram. Instead, it provides an error message explaining that the constraints could not be met. </p>"},{"location":"directives/","title":"Directives","text":"<p>[TODO: Rewrite]</p> <p>Directives are statements on how (and which) elements in the graph should be rendered.</p>"},{"location":"directives/#attributes","title":"Attributes","text":"<p>These replace graph edges representing a relation with attribute fields within the source node of the edge. This is analogous to attributes in Sterling themes. In the example below, the relation <code>id</code> is shown as an attribute.</p> <pre><code>directives:\n    - attribute: {field: id}\n</code></pre>"},{"location":"directives/#icons","title":"Icons","text":"<p>These associate specific icons with atoms of a certain <code>sig</code> type.</p> <pre><code>  - icon:\n      sig: Apple\n      icon:\n        path: 'http://&lt;website&gt;/img/apple.png'\n        height: 70\n        width: 70\n</code></pre>"},{"location":"directives/#color","title":"Color","text":"<p>Allows specific hex-colors (or simple color names) to be associated with <code>sigs</code>.</p> <pre><code>directives:\n    - color:\n        sig: Apple\n        value: \"red\"\n</code></pre> <p>By default, we assign every <code>sig</code> a random color, that is respected by all atoms of that type.</p>"},{"location":"directives/#projection","title":"Projection","text":"<p>These allow projections over atoms of a certain type.  In the example below, the sig <code>Ord</code> is projected over.</p> <pre><code>directives:\n    - projection: {sig: Ord}\n</code></pre>"},{"location":"directives/#flags","title":"Flags","text":"<p>We also support some basic layout settings that act upon atoms of specific <code>sig</code> types.</p> <ul> <li><code>hideDisconnected</code>: If true, hide all atoms in the graph that are not referenced by a relation.</li> <li><code>hideDisconnectedBuiltIns</code>: If true, hide all atoms of built-in type (ex. <code>Int</code>) that are not referenced by a relation.</li> </ul> <pre><code>directives:\n    - flag: hideDisconnectedBuiltIns\n</code></pre>"},{"location":"syntax/","title":"Syntax","text":"<p>Cope-and-Drag (CnD) uses a YAML-like syntax to define constraints and directives for refining Alloy-generated diagrams. A CnD specification consists of two primary components:</p> <ul> <li>Constraints: Define spatial relationships between elements.</li> <li>Directives: Control visual styling and representation.</li> </ul>"},{"location":"syntax/#structure-of-a-cnd-program","title":"Structure of a CnD Program","text":"<p>A basic CnD specification follows this structure:</p> <pre><code>constraints:\n  - &lt;constraint-type&gt;: &lt;parameters&gt;\n\ndirectives:\n  - &lt;directive-type&gt;: &lt;parameters&gt;\n</code></pre>"},{"location":"syntax/#constraints","title":"Constraints","text":"<p>Constraints define spatial relationships between elements in the diagram. Each constraint consists of a type and associated parameters.</p>"},{"location":"syntax/#cyclic-constraints","title":"Cyclic Constraints","text":"<p>Arranges elements related by a field in a circular layout.</p> <pre><code>constraints:\n  - cyclic:\n      field: next\n      direction: clockwise  # or counterclockwise\n</code></pre>"},{"location":"syntax/#orientation-constraints","title":"Orientation Constraints","text":"<p>Specifies the relative positioning of elements.</p> <pre><code>constraints:\n  - orientation:\n      field: left\n      directions: [left, below]  # Multiple allowed\n  - orientation:\n      field: right\n      directions: [right, below]\n</code></pre> <p>Alternatively, orientation can apply to entire signatures:</p> <pre><code>constraints:\n  - orientation:\n      sigs: [A, B]\n      directions: [above]\n</code></pre>"},{"location":"syntax/#grouping-constraints","title":"Grouping Constraints","text":"<p>Groups elements together based on a field.</p> <pre><code>constraints:\n  - group:\n      field: category\n      target: domain  # or range\n</code></pre>"},{"location":"syntax/#directives","title":"Directives","text":"<p>Directives control the visual representation of elements, including icons, colors, attributes, and visibility.</p>"},{"location":"syntax/#pictorial-directives","title":"Pictorial Directives","text":"<p>Assigns an icon to a signature.</p> <pre><code>directives:\n  - pictorial:\n      sig: Person\n      icon:\n        path: person.svg\n        height: 20\n        width: 20\n</code></pre>"},{"location":"syntax/#theming-directives","title":"Theming Directives","text":"<p>Controls color, attributes, projections, and visibility.</p>"},{"location":"syntax/#color-assignment","title":"Color Assignment","text":"<pre><code>directives:\n  - theming:\n      sig: Node\n      color: red\n</code></pre>"},{"location":"syntax/#displaying-field-attributes","title":"Displaying Field Attributes","text":"<pre><code>directives:\n  - theming:\n      field: name\n      attribute: true\n</code></pre>"},{"location":"syntax/#projection","title":"Projection","text":"<p>Focuses the diagram on a specific signature.</p> <pre><code>directives:\n  - theming:\n      projection: Process\n</code></pre>"},{"location":"syntax/#visibility-flags","title":"Visibility Flags","text":"<p>Controls which elements are hidden.</p> <pre><code>directives:\n  - theming:\n      visibility: hideDisconnected  # or hideDisconnectedBuiltIns\n</code></pre> <p>This syntax provides a structured and lightweight way to refine Alloy visualizations without requiring complex custom code.</p>"}]}